[[{"l":"BoxUK WP Packages Mono Repo","p":["This is the BoxUK mono-repo for our WordPress packages. The WordPress Skeleton uses these packages to add functionality. All packages provide their own documentation:"]},{"i":"read-the-docs","l":"\uD83D\uDCDA Read the docs"},{"l":"Working on the packages mono-repo"},{"l":"How to use","p":["This mono repo allows you to develop any of the packages. To start a WordPress development environment to test against, either:","run docker-compose up -d wordpress to start the container or run bin/start, which runs composer & npm installs, starts the container and runs npm start","and you'll be able to access WordPress at http://localhost:8000.","We use Monorepo Builder tools to manage the mono-repo dependancies."]},{"l":"Structure","p":["Each of the packages within the packages directory is an individual package. These should be standalone, and any dependancies they have (with another package or external) should be loaded via composer."]},{"l":"Adding Dependancies","p":["Dependancies for each package should be defined in the package's composer.json file. Once the file has been altered, from the root of the project run the following commands:"]},{"l":"Adding a package","p":["To create a package, you can run bin/create-package package-name and this will scaffold out all the necessary changes needed. In order for your package to be published, you'll also need to modify /.github/workflows/packages.yml to configure the package name and the target repository for publishing. This will automate pushing changes of the package out to the target repository, but you may need further work to ensure that repository is available via composer in your projects."]},{"l":"Tests","p":["All packages need to have 100% test coverage. During CI they will be tested for this capability."]},{"l":"Javascript","p":["If your package requires javascript, you can also setup a package.json file in the root of the package. Much like composer.json, this will be merged automatically at the root level.","To run npm commands directly in your package run bin/npm -w packages/package-name with your command. For example bin/npm -w packages/iconography run test would run tests specifically in the iconography package.","Commands can also be run globally across all packages using turbo. This is setup so that if you run bin/npm run test it will run test in every package that has a package.json file with a test script. You should try to keep naming consistent across packages to support this work. All currently supported scripts in turbo are listed in the turbo.json file at the root.","During CI, the lint, test and build NPM scripts are run to validate the package quality. You should ensure your package supports these."]}],[{"l":"BoxUK WordPress Project Skeleton","p":["A base WordPress project from Box UK to get you up and running quickly."]},{"l":"Installation","p":["Create a new project with composer","Install with the simple install script","Note: This is an interactive command."]},{"l":"Usage","p":["Frontend:","https://my-project.local","Admin:","https://my-project.local/wp-admin","If you need to update the admin password, you can run the following WP-CLI command:"]},{"l":"Features","p":["\uD83D\uDCD5 - Fully documented.","\uD83D\uDC33 - Fully dockerized setup","\uD83D\uDCE6 - Composer based plugin management","\uD83E\uDDE0 - Genius xDebug setup","\uD83D\uDCCB - Dictator support for dictating state across environments","\uD83E\uDE9C - Fixtures support using wp-cli-fixtures","\uD83C\uDFCB️‍♀️ - Optimised mu-plugin setup, including scaffold tool","\uD83D\uDEA9 - First class support for feature flags using wp-feature-flags","✅ - Unit, Integration and Visual Regression testing support","You can read more about all of these features in this post on the Box UK blog."]}],[{"l":"Docker Setup","p":["If you just want a ready to go docker environment you can just use the quickstart, do read on though if you're after more detail."]},{"l":"Pre-requisites"},{"l":"Pre-requisites for Windows systems","p":["WSL","Linux Kernel Update Package","Cygwin(be sure to include the gettext package on install)"]},{"l":"Pre-requisites for all systems","p":["Docker","Docker compose"]},{"l":"Env Vars","p":["You will also need to set up a bunch of environment variables"]},{"i":"env","l":".env","p":["Create a .env file based on .env.dist.","On Linux systems you will want to set USER_ID and GROUP_ID to the uid/gid of your primary user. These do not need to be set on Windows/Mac systems."]},{"i":"dockerdatabaseenv","l":"./docker/database/.env","p":["Create the .env file baed on .env.dist.","It is recommended to change the default passwords even for development environments."]},{"i":"dockerappenv","l":"./docker/app/.env","p":["Create the .env file based on .env.dist.","It is recommended to change the default passwords even for development environments.","Env vars declared here will override any vars declared in the .env file in the root. See the header comment within the root .env.dist for an explanation as to why, baring in mind that in this context the 'real' environment is docker."]},{"l":"Hosts file entries","p":["127.0.0.1 $PROJECT_NAME.local","If you want to change this you can, but you will need to make a change to WP_HOME in ./docker/app/.env."]},{"l":"Create environment","p":["docker network create --subnet=192.168.35.0/24 $DOCKER_NETWORK_NAME","The docker network is required to ensure the loopback works with the expected IP address.","docker-compose build","This only needs to be called once to build the image(s)","Use docker-compose up to build the containers. You'll only need to use this the first time.","Use docker-compose start to start the container","Use docker-compose stop to stop the container (without removing the volumes).","Using docker-compose down stops containers but also removes them. This will lead to loss of data (e.g. your database).","That's it! You should now be able to browse to https://$PROJECT_NAME.local(or whatever you set) and view the site. Note, at time of writing you will need to go through the install script to have WordPress set up."]},{"i":"running-with-mac-and-docker-desktop","l":"Running with Mac (And Docker Desktop)"},{"l":"Xdebug","p":["We are running 2 app containers. By default, you will be using an xdebug-free container. This speeds up local env in browser and CLI as they no longer run xdebug for every request.","Setup","Download a browser extension for your browser from https://www.jetbrains.com/help/phpstorm/2020.2/browser-debugging-extensions.html","Configure the browser extension to make sure the IDE key matches the one set in your ./docker/app/.env(by default it is wordpress)","Settings","Ensure your IDE is set up correctly. Screenshots below show PhpStorm setup as an example.","Debugger","Server","To run xdebug in the browser: enable it in your IDE; add breakpoints; then go to your browser; enable xdebug in the browser extension (from first step of the setup) and reload the page.","To run xdebug in CLI: enable it in your IDE; add breakpoints; then execute the CLI command:","Or, use one of the helper scripts located in ./bin/docker/xdebug","On linux, remember to set remote_host to 192.168.35.1"]},{"l":"Running composer or wp-cli","p":["If you wish to run composer or wp-cli there are two bin scripts that will allow you to run directly on the container:","bin/docker/composer bin/docker/wp"]}],[{"l":"Fixtures","p":["We are using wp-cli-fixtures for fixtures."]},{"l":"Install","p":["./bin/docker/wp package install git@github.com:nlemoine/wp-cli-fixtures.git"]},{"l":"Usage","p":["Fixtures can be added to ./fixtures.yml see readme of wp-cli-fixtures for more info."]},{"l":"Load fixtures","p":["Fixtures can be loaded with the following command:","./bin/docker/wp fixtures load"]},{"l":"Delete fixtures","p":["If you wish to delete fixtures you've previously loaded, you can do so via:","./bin/docker/wp fixtures delete"]}],[{"l":"HTTPS","p":["As part of the nginx docker container we set up a self-signed certificate. This allows us to access the site locally using HTTPS. We do this, because all our websites are served over HTTPS and so we want to ensure we are doing the same locally.","The issue with self-signed certificates is browsers (quite rightly) deem them unsafe. You should too. You should only bypass the security warnings of your browser if you are working on a secure network."]},{"i":"using-a-local-certificate-authority-ca","l":"Using a local certificate authority (CA)","p":["The general recommended approach for not relying on self-signed certificates is to set up a local CA. There are several tools for doing this, but perhaps the easiest is mkcert.","Before some basic instructions for setting this up, here is some information/disclaimer:","Installing a local CA is at your own risk. Although it will only be trusted by you, a local CA will contaminate your trusted CAs. This means, if your local environment is compromised, or mkcert, then your entire HTTPS trust chain can easily be compromised too. It is for this reason we do not set this up by default and cannot recommend this approach.","If you're comfortable with all that and still want to go ahead, here's how you can do it with mkcert."]},{"l":"Install mkcert","p":["On Mac:","For other platforms see: https://github.com/FiloSottile/mkcert#installation"]},{"l":"Add mkcert to your local root CAs"},{"l":"Generate a certificate"},{"l":"Update docker config","p":["Add the following volumes to the nginx container within docker-compose.yml","Update docker/nginx/conf/app.conf to point to your certificate and key:"]},{"l":"Rebuild containers","p":["docker-compose stop; docker-compose build; docker-compose up"]},{"i":"any-other-options","l":"Any other options?","p":["There are, this page from the chromium site lists a few other things you might want to try also: https://www.chromium.org/Home/chromium-security/deprecating-powerful-features-on-insecure-origins#TOC-Testing-Powerful-Features"]}],[{"l":"Non Docker Setup","p":["Generally, we do not offer support for non-dockerised setups. However, running without docker should be fairly straightforward if you're familiar with running WordPress locally. You'll require PHP & Composer, a MySQL (or equivalent) server, and a web-server (Apache, Nginx etc). Set the document-root to the root of the project, and ensure your DB credentials are added to the relevant sections of your .env file."]}],[{"l":"Patched Plugins","p":["Sometimes a plugin you rely on doesn't work quite right and they either aren't on github or are just ignoring your submitted PR. In this scenario it's useful to 'patch' the plugin, i.e. make direct changes to the source of the plugin.","Doing this directly in wp-content/plugins isn't safe because it can get reverted to the source easily with a composer install or update.","Therefore, we offer a way of safely patching plugins by using a similar method to how we deal with premium plugins. By patching and thus installing from the patched-plugins directly we are controlling the patch in a confined way, with a neat install and upgrade path.","IMPORTANT: When we patch the plugin in this way, we are diverging from the original source and thus aren't able to easily install updates. Therefore, patching a plugin should be considered a last resort or a temporary measure until you're able to get back to the source.","To patch a plugin, take the following steps:"]},{"l":"Composer dependency","p":["Move the plugin to patched-plugins","mv wp-content/plugins/plugin patched-plugins/plugin","Make the change/patch required and record the diff to a file. This diff should be saved with the plugin, so that if we update the plugin to a newer version we can either re-apply the patch, or if it's been fixed upstream move back to the un-patched version.","Edit patched-plugins/plugin/composer.json(or add one if it doesn't exist, see further down for an example) to include a patched version number, and ensure the namespace is set to wp-patched-plugins/.","Remove the original package"]},{"i":"adding-a-composerjson","l":"Adding a composer.json","p":["Add a composer.json into the directory, that should look like the following (note, if the plugin already has a composer.json you can just use that, just make sure you use the name from within their composer.json):"]}],[{"l":"PHP Versions","p":["The skeleton supports the following PHP versions:","8.2 (default)","8.3"]},{"l":"Using docker","p":["When using docker you can easily decide which PHP version you want to use by setting the PHP_VERSION environment variable in the .env file.","If you're using the bin/install script (recommended) then you can specify which version you want to run by passing a 4th option. For example, if you want to use PHP 8.3 you might run something like the following:","bin/install boxuk-wp-skeleton '' boxuk-docker 8.3"]},{"l":"Not using docker","p":["If you're not using docker it will use whichever version of PHP is installed on your system."]},{"i":"composerlock-issues","l":"composer.lock issues","p":["We need to use composer.lock in the main because we are using composer for plugins. We need to ensure plugins are locked to specific versions. We can't trust that always updating plugins will work, we generally rely on dependabot to update our plugins, so we can review the changes as part of a PR and make a decision whether we want to upgrade or not.","This presents a challenge if we need to change our version of PHP as our composer.lock file will be locked to the original PHP version we were using. This should be a rare occurrence but if you come across it you can solve by either updating each library individually which is causing issues or by doing a blanket composer update or by removing the lock file and running composer install."]}],[{"l":"Premium Plugins"},{"l":"Plugin repository","p":["The desired approach is the plugin provider offers a private repository we can auth with. See how delicious brains handle it for a good example: https://deliciousbrains.com/wp-migrate-db-pro/doc/installing-via-composer/","In this scenario we can add the credentials to auth.json and it should work ok.","IMPORTANT: auth.json must not be committed to source control, instead add to auth.json.dist with details on where to obtain the credentials.","VERY IMPORTANT: Check the license terms of the plugin before using auth.json if the license only covers a single dev and that dev is not you, do not do this. If in any doubt check with the lead developer."]},{"l":"Adding a new plugin repository","p":["Follow the instructions from the plugin provider, but usually it will be the following steps:","Add repository to composer.json","Add creds to auth.json(and documented in auth.json.dist)","Require the package","composer require vendor/plugin","The auth.json should not be included in version control, and instead should be generated by your CI pipeline using the secrets process for your given CI solution."]},{"l":"Plugin zip file","p":["Sometimes all we have for a premium plugin is a zip file (or we can't install via the above method for reasons such as dependency clash). In these cases we need to take the following steps:"]},{"l":"Adding a new plugin zip file","p":["Unzip to premium-plugins","Pro tip: If you download and unzip to ~/Downloads you can just do cp -fR ~/Downloads/plugin-name ./premium-plugins","Add a composer.json into the directory, that should look like the following (note, if the plugin already has a composer.json you can just use that, just make sure you use the name from within their composer.json):","composer require wp-premium-plugins/plugin-name","Although this is shorter than the above method it's not as desired because it puts the emphasis on us to keep the plugins up to date where as with a private repository we can get updates automatically with composer. It also means we have to commit the files to our VCS as well."]}],[{"l":"Quickstart"},{"l":"Pre-requisites"},{"l":"Pre-requisites for Windows systems","p":["WSL","Linux Kernel Update Package","Cygwin(be sure to include the gettext package on install)"]},{"l":"Pre-requisites for all systems","p":["Docker","Docker compose"]},{"i":"tldr","l":"TL;DR","p":["If you just want a ready to go environment you can just use the following commands, if you're after more detail read the docker setup or non docker setup docs instead","The docker network is required to ensure the loopback works with the expected IP address.","Note: This will start the containers in detached mode, use docker-compose stop if you wish to stop them."]}],[{"l":"Set up initial state","p":["Run composer (if you haven't already):","bin/docker/composer install","or simply composer install if not using docker","So you have WordPress set up and you're ready to rock. You can go through the WordPress installer and set everything up manually or you can automate this using dictator","Before using dictator though you will need to do install, so run the following first:","bin/docker/wp core install --url=https://$PROJECT_NAME.local --title=Box UK WordPress Project --admin_user=admin --admin_email=boxuk@example.com","Be sure to take a note of the generated password!","To do this, take a look at site-state.yml and edit to your needs, then run:","bin/docker/wp dictator impose site-state.yml","(or bin/wp dictator impose site-state.yml if not using docker)","This should give you an installed WordPress with some basic settings already set."]}],[{"l":"Testing","p":["Testing WordPress sites can be a challenge. We should strive to make use of different testing techniques to ensure we're getting good test coverage across our sites. Here are the different types of tests we recommend and how to achieve each.","Unit Testing","Integration Testing","Visual Regression Testing","Acceptance Testing"]},{"l":"Unit Testing","p":["Unit tests should test your code decoupled and independent the core logic from WordPress. For this to be true we should avoid any use of global functions or hidden dependencies in any classes/functions we use for our core logic. We should then be able to unit test these easily.","We use WP_Mock to help mock some WP core functions, with PHPUnit as the test runner."]},{"l":"Integration Testing","p":["Integration tests should test where your code depends on intergration with other codebases, including WordPress or other plugins.","We also use PHPUnit for integration testing along with WP PHPUnit which will allow you to interact with the WordPress install easily. It also provides a number of helpers to allow for easy generation of synthetic data for testing."]},{"l":"Running the unit tests","p":["Unit tests are should live within each mu-plugin in a tests directory. Integration tests are to be stored in /tests/integration though it would be sensible to structure this folder with names consistent with the class under test.","bin/docker/composer run phpunit bin/docker/composer run phpintegration","(or composer run phpunit if not using docker)"]},{"l":"Visual Regression Testing","p":["Sometimes hard to find bugs can be present even though all our automated tests are passing, this could be due to something that's fallen through the cracks, a JS/CSS issue, an update to a plugin or theme, an update to a browser or something else entirely. It's therefore useful to run Visual Regression (VR) tests to catch anything that may have changed how the site appears to the end user.","VR tests work by taking screenshots of given scenarios (typically defined pages/posts), approving the screenshots to a known state and then comparing future runs against this approved state to see if anything has changed. Tests will then fail if the difference between the screenshots is above a set tolerance.","We use Playwright for VR testing."]}],[{"l":"Troubleshooting"},{"l":"WP install fails","p":["Sometimes the WordPress install in the bin/install script can fail. This is usually fixed by increasing the sleep time:"]},{"l":"Docker errors","p":["ERROR: readlink /var/lib/docker/overlay2: invalid argument","Often this is due to a corrupted image that needs to be rebuilt sans cache.","docker-compose build --no-cache","Or you can amend the install script to include the --no-cache option, e.g."]},{"l":"Permission errors","p":["If you are on a Linux machine, you will need to uncomment the following within the root .env file:","Note: You will need to stop and rebuild the containers when changing env vars, e.g. docker-compose stop; docker-compose up --build"]},{"l":"Certificate warnings","p":["On chrome you will need to type thisisunsafe to bypass the certificate warning (make sure your cursor isn't in the url bar). Othe browsers usually give you a button you can use to bypass."]},{"l":"Slow local env"},{"l":"Composer autoloader optimisations","p":["Composer can often be quite slow if you have lots of classes and it falls back to filesystem lookups.","They have addressed this with a series of autoloader optimisations.","Typically, Level 1 optimisations composer install -o/ composer dump-autoload -o are enough, however with WordPress you are likely to get a large number of autoloader misses due to the fact many plugins and things are not installed via composer.","Therefore, we can have more success with the Level 2 optimisations. Using an authoritative classmap should be ok, because everything we want to autoload through composer should be defined in the classmap and we are unlikely to be declaring classes dynamically.","composer install -a","or","composer dump-autoload -a","If we do come across class not found errors though then we may need to look into APCu caching."]},{"l":"Query Monitor","p":["Sometimes query monitor can slow down your local env, particularly if you have xdebug enabled. You can de-activate through the admin or on CLI with:","./bin/docker/wp plugin deactivate query-monitor","To re-activate:","./bin/docker/wp plugin activate query-monitor"]},{"l":"Object Cache","p":["Sometimes using wp-memcached can cause slowdown locally due to limited memory on a developers machine (or assigned to the container). To stop using memcached, simply remove the object-cache.php file within wp-content","rm -f wp-content/object-cache.php","To re-enable:","cp wp-content/plugins/memcached/object-cache.php wp-content/object-cache.php"]},{"l":"Other","p":["If you're still having trouble, sometimes it can be resolved by re-fetching and re-building fresh images:","docker-compose stop; docker-compose build --no-cache --pull"]}],[{"l":"Usage","p":["Any plugins and themes should be installed via composer. Any custom development that doesn't fit should be done as part of mu-plugins. Any custom work done on the visual element of the site should be done within themes."]},{"i":"memcache-caching-optional","l":"Memcache caching (optional)","p":["This one is optional but highly recommended, if you want to use memcache for object caching, you need to run the following (will have been done during install if you used the install script):","cp wp-content/plugins/memcached/object-cache.php wp-content/object-cache.php"]},{"l":"Running the code sniffs","p":["We use the WordPress VIP coding standards to ensure the code is adhering to the best possible performance and security practices. We also use the core WordPress standards and the Neutron standards to ensure for consistency for a modern WordPress code base. You can check your code against all of this by running the following command:","bin/docker/phpcs"]},{"l":"Working with Feature Flags","p":["We encourage working with feature flags. You can review the documentation;"]}],[{"l":"VIP","p":["If the app is going to be deployed on VIP you will need to make the following changes."]},{"l":"Replace wp-content with the VIP Go Skeleton","p":["rm -rf wp-content","git clone https://github.com/Automattic/vip-go-skeleton wp-content","Make sure you bring over the appropriate parts of the wp-project-skeleton folder though."]},{"l":"Change the vendor location to be a client-mu-plugin","p":["Because we have moved the vendor directory, we will also need to update the path from which the test bootstrap file loads the autoload file generated by Composer"]},{"l":"Update config to reflect the move of mu-plugins to client-mu-plugins","p":["Swap references mu-plugins with client-mu-plugins in the following files:",".gitignore","phpcs.xml.dist","phpunit.xml.dist"]},{"l":"Change the install location of mu-plugins"},{"l":"Replace install with vip-install","p":["rm bin/install;","mv bin/vip-install bin/install","Or remove bin/install and just use bin/vip-install"]},{"i":"update-vendor-volums-for-app-and-app_xdebug-in-docker-composeyml","l":"Update vendor volums for app and app_xdebug in docker-compose.yml","p":["We set the vendor directory as a volume in docker so we can set it to delegated due to it predominantly being written too by the container. When on VIP this is likely to differ from wp-content/vendor to something more like wp-content/client-mu-plugins/vendor so this should be updated accordingly within docker-compose.yml."]},{"l":"Ordering of initialisation files","p":["VIP uses a 000-vip-init.php file to initialise their code, we use a 000-boxuk-init.php file. Code initialised by the VIP initialisation script defines a constant called WPCOM_VIP_CLIENT_MU_PLUGIN_DIR. It does not check whether this constant is already defined before defining it, so we are unable to set it ourselves. However, code initialised by our script relies on this constant being set. Therefore the VIP initialiser needs to run before ours. Because these files are loaded in alphabetical order, 000-vip-init.php will be loaded after 000-boxuk-init.php. Therefore, in order to swap the order these are loaded we must rename our initialisation file to 001-boxuk-init.php.","Also, add the following to the top of your 001-boxuk-init.php file so that the plugin loader reads from our client-mu-plugin directory rather than the vip mu-plugin directory:","define( 'MU_PLUGIN_LOADER_SRC_DIR', WPCOM_VIP_CLIENT_MU_PLUGIN_DIR . '/' );"]}],[{"l":"Box WordPress Editor Tools","p":["A collection of tools for modifying the WordPress Editor."]},{"i":"quick-start","l":"Quick Start!","p":["All the tools load automatically if you've installed this as a plugin to your WordPress site. If not, you can use each class as needed.","There's more options for each tool, so checkout the links below:"]},{"l":"Features","p":["Asset Loader- help load assets generated by wp-scripts.","Block Loader- auto-loads blocks to the editor.","Comment Disablement- disables comments.","Editor Cleanup- removes some unnecessary bits from the block editor.","Post Type Registrations- speeds up post-type registration with a single JSON file.","Template Persistence- speeds up template modifications by saving to disk instead of the database.","Security- Adds security hardening."]},{"l":"Contributing"},{"i":"please-do-not-submit-any-pull-requests-here-they-will-be-closed","l":"Please do not submit any Pull Requests here. They will be closed.","p":["Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"l":"Block Loader","p":["The Block Loader will automatically load all blocks by looking for block.json files in a given path. These are loaded with register_block_type, see WordPress Docs for more context."]},{"l":"Usage","p":["Block loader is included automatically, and defaults to loading from your wp-content/theme/THEME_NAME/build folder. You can change this value using the boxuk_block_loader_base_path filter."]}],[{"l":"BoxUK Asset Loader","p":["The Asset Loader class allows for any asset generated via WP-Scripts to be loaded to WordPress."]},{"l":"Basic Usage","p":["Simple usage:","This will load the following files if they exist:","/wp-content/themes//build/index.js","/wp-content/themes//build/index.css","You should typically use these methods in a function tied to wp_enqueue_scripts hook."]},{"l":"Advanced Usage"},{"i":"base-path--url","l":"Base Path & URL","p":["You can specify the base path for the asset loader to load from."]},{"l":"Asset Handle Prefix","p":["The scripts and styles are enqueued to WordPress using a handle that is made of a prefix and the name passed to ::load(). You can modify the prefix:"]},{"l":"Localisation or Additional Data","p":["The loader can also inject any data in the JS context for your script to use. See the WordPress Docs for wp_localize_script for more context."]},{"l":"The object name","p":["The default object-name is {handle}Data, so AssetLoader::load('index') would create an object called indexData. You can filter this using the localize_{handle}_data_object_name filter."]},{"l":"The Object Data","p":["The object provided in the JS context can have it's data populated via a similar filter, localise_{handle}_data."]},{"l":"Example Full Usage","p":["Here's an example of a plugin using the asset loader in full."]}],[{"l":"Comment Disablement","p":["This will remove the ability for comments from your WP installation."]},{"l":"Usage","p":["Comments are disbaled by default, but can be enabled by modifing the boxuk_disable_comments filter:"]}],[{"l":"Editor Cleanup","p":["This will hide some additional features added to the block editor:","Core Block Patterns: WordPress provides a collection of patterns, but most themes will provide their own patterns and as such the WordPress provided patterns make finding your patterns much harder!","Block Directory: When inserting blocks, if the user has searched for a block that doesn't exist, WordPress helpfully searches the plugin directory for any plugins that might include that block. Mostly this is not desired behaviour on projects delivered for clients.","WordPress VIP Featured Plugins: WordPress VIP adds a banner to highlight featured plugins for their platform. Plugins are managed by the developer so this should be hidden."]},{"l":"Usage","p":["The editor cleanup is enabled automatically and does not have any configurable options."]}],[{"l":"Post Types","p":["A shorthand for registering post types via a JSON file instead of a whole bunch of PHP to make life just a little bit easier."]},{"l":"Usage","p":["This feature is enabled automatically with the plugin.","You will also need to define a JSON file which configures your post-types. This should be caleld post-types.json and live in the root of your theme ( wp-content/themes/{theme_name}/post-types.json).","You can modify the path of this file using the boxuk_post_types_json_file_path filter.","The schema file will help your IDE populate any fields you think you need. After parsing, the file is passed to register_post_type() so the WordPress documentation should be useful!"]},{"l":"Registering templates for new posts","p":["The block-editor allows you to specify a template of which blocks should be automatically inserted for all new posts created. This shouldn't be confused with the also-named 'Templates', which are the the templates in which the content of the post is within.","The new-post-templates are a collection of blocks that are pre-inserted when the editor loads and can speed up content entry. You can define these using the array syntax in your JSON file, but this becomes very verbose and difficult to manage.","Alternatively, you can add a file to your theme ( wp-content/themes/{theme_name}/post-type-templates/{post_type_slug}.html) which includes the gutenberg markup in HTML format. A quick way to build these is to load the editor in your browser, build the template out as you would normally. Enable 'Code Editor View' in the block editor, and you can copy the HTML that has been generated by the blocks. This can be pasted in your file and saved. You may wish to replace any hardcoded image URLs with placeholder image URLs."]}],[{"l":"Security","p":["Some security hardening features are available for you to use."]},{"l":"Usage","p":["The security hardening features will load automatically with sensible defaults, but there's a number of filters you can use to configure."]},{"l":"Filters","p":["boxuk_disable_rss","boxuk_modify_session_timeout","boxuk_prevent_author_enum","boxuk_prevent_author_rest_endpoint","boxuk_remove_vip_headers","boxuk_restrict_http_request_methods","boxuk_restrict_login_by_username","boxuk_restrict_user_creation","boxuk_send_no_sniff_headers","boxuk_validate_password","Default Value","Description","Disables the RSS functionality","Enforces strong password validations","false","Filter Name","Filters should be added at the earliest possible point, so avoid adding via a hook (ie don't add to init you might be too late). WordPress includes helpful return true/false methods to make it super easy to configure.","Modifies the default session period to 10 hours","Prevents access to the author API endpoint","Prevents access to the author-archive pages","Removes X-Hacker and X-Powered-By headers","Restricts creating users in the admin interface","Restricts HTTP methods to the known list","Restricts logging in by username (allows by email only)","Sends nosniff and frame_options headers","true"]}],[{"l":"Template Persistence","p":["One of the biggest annoyances about developing block-based themes is that if you modify a template (ie archive.html or single.html) in the block editor in the browser, you'd need to migrate that change to the HTML file to be added to version control. By default, WordPress saves the changes you make to the database which then overrides any subsequent changes you make to the HTML file.","This change saves your edits to templates to their respective .html file. This applies to all wp_template, so anything accessed via Templates in the site-editor."]},{"l":"Usage","p":["Template persistence is enabled automatically, but can be disabled by passing a value to the boxuk_disable_template_persistence filter:","Since local environments can vary so much, we have not included any checks in the template persistence class to validate which environment is used. See docs for wp_get_environment_type() for the above example code."]}],[{"l":"Box WordPress Iconography Support","p":["Add the ability to add icons inline to your content in the WordPress block editor."]},{"i":"quick-start","l":"Quick Start!","p":["Add this plugin to your WordPress site and include a configuration file and it's ready to use!","If you're using composer, then it's as simple as composer require boxuk/wp-iconography."]},{"l":"Configuration","p":["Configuration files are based on a schema that allows you to quickly define the configuration. They're loaded automatically from wp-content/themes/{theme_name}/icons/*.config.json, or you can define any custom paths using the filter available:","There's also example configuration files included in the plugin, so if you want to load Material Symbols you can just load the config included using this snippet:","There's loads of filters available to change the way icons load, so feel free to look through the source code at the available filters. And if there's function that doesn't work for you, PRs are always welcome!"]},{"l":"Configuration Schema","p":["The Schema for configuration includes:","Title- the name output in the editor.","Name- the unique key/name for the icon set. I'd recommend namespace/name format.","Tag Name- this is the HTML tag that will be used to generate the output for the icon.","Class Name- this is used to generate the output for the icon","URL- the CSS file to load","Additional CSS- any inline CSS to include that might be relevant.","Icons- an array of:","Label- the value to use in the admin interface. Used for searches and is displayed on hover.","Content- the content inside the HTML generated.","Sample JSON file:","Generated output:"]},{"l":"Contributing"},{"i":"please-do-not-submit-any-pull-requests-here-they-will-be-closed","l":"Please do not submit any Pull Requests here. They will be closed.","p":["Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"l":"Consent Management","p":["A WordPress plugin to provide an interface for providing cookie consent that integrates with Google Tag Manager Consent Mode.","Provides a fully customisable experience for editors to setup the relevant labels and text for configuring Google Tag Manager consents, and inserts the relevant tag manager code to the page.","Based on Vanilla Cookie Consent, the interface is ready for you to apply your customisations. To customise the look feel, see the file at ./sample/style.scss or follow the docs from Cookie Consent to add CSS."]},{"l":"To Do","p":["[] Allow UI shape/style customisation (ie change from popup to banner etc)","[] Allow colour/style specification from within the admin interface. (at the moment a user-provided CSS sheet must be included to modify the deafult style).","[] Allow for further customistaion","Please do not submit any Pull Requests here. They will be closed. Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"l":"WordPress Deps Auto Updater","p":["This is a simple GitHub Worklfow to run the update-packages script from the given repository and create a PR with the output."]},{"l":"Usage","p":["Create a .github/workflows/wordpress-deps.yml file with the following:"]},{"l":"Setting up your Project for WP Packages","p":["WordPress bundles versions of certain dependancies from WordPress core, and when we use wp-scripts to compile our packages it strips out the versions we've defined in package.json and instead relies on the versions bundled by WordPress. This means that you should be using the same dependancy version as WordPress provides during development to make sure that you're building compatible code.","Because of this, you should not allow dependabot or other automated solutions to update an @wordpress/ packages in your node package. Instead, the wp-scripts packages-update command should be used."]},{"l":"Setting up your project","p":["You should define a WORDPRESS_VERSION env value in your .env file. This should be the major and minor version ie, 6.6 or 7.2.","You could use another technique to determine the WordPress version, such as reading from your composer.json file.","Your package.json file should include a script which handles updating the the WP packages to the given version. If you're using turbo to manage a mono-repo, this would typically look like:","Without turbo the command would look similar but without the concurrency and the extra -- args."]},{"l":"Setting up Dependabot","p":["You should disable dependabot from updating the included deps, by adding the following to your dependabot.yml file:"]},{"l":"Contributing"},{"i":"please-do-not-submit-any-pull-requests-here-they-will-be-closed","l":"Please do not submit any Pull Requests here. They will be closed.","p":["Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"l":"WordPress Email TLD Checker","p":["A small WordPress plugin to validate email addresses against valid TLDs.","https://github.com/BoxUk/wordpress-email-tld-checker","License"]},{"l":"Installation","p":["Installation is handled via Composer.","Make sure you have composer/installers configured to install within the plugins dir.","Activate the plugin.","Or via the plugins section of the admin UI."]},{"l":"Usage","p":["Once the plugin is activated, an email validation ( is_email()) will now check that the TLD (the .com bit for example) is valid according to the official IANA database."]},{"l":"Troubleshooting","p":["The plugin is designed to be installed with Composer and assumes you are including somewhere the autoloader that comes with composer, if you're not then you may run into some issues. The easiest way to resolve is to include the autolaod.php from composer, but failing that you may be able to manually require the following files:","$vendor_dir . '/symfony/polyfill-intl-idn/Idn.php'","$vendor_dir . '/symfony/polyfill-intl-idn/bootstrap.php'","$vendor_dir . '/arubacao/tld-checker/src/RootZoneDatabase.php'","$vendor_dir . '/arubacao/tld-checker/src/Validator.php'"]},{"l":"Contributing","p":["Please do not submit any Pull Requests here. They will be closed.","Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"l":"WP Feature Flags","p":["A plugin used to manage the publishing of features.","## Use case","At BoxUK, we release code behind feature flags. There are lots of reasons for this, but it mainly allows us to release code more frequently and at lower risk.","We use flags to slowly roll out functionality in increments, across environments. They also let us hide features without a code deploy if we spot bugs."]},{"l":"Registering a flag","p":["Registering flags is handled using the FlagRegister singleton calling it's register_flag() method. It's recommended you load flags as early as possible in the load order, either by hooking to muplugins_loaded, or even calling the registration method un-hooked so that the flag registry can be populated as early as possible. We recommend that all flags are loaded before the init hook so that reading the flag status can be added after this.","A simple flag registration looks like this:","There's also a register_flags() where you can pass an array of Flag objects.","A new flag instance can be added with the following properties:","key (text string)- The unique key for the flag.","name (text string)- the briefest possible summary of what the flag does","description (text string)- a bit more detail about what the flag does, or why it exists","There are extra attributes that can be set in this array that give you more control over your flags.","created (DateTime)- the date you decided to add this flag. This will help with technical debt management. Defaults to null.","group (text string)- to make related flags easier to find, you can group them together by giving them the same group name.","force-enable (true/false)- flags can be forced into a published state by setting this to true. This defaults to false.","force-disable (true/false)- flags can be forced into a disabled state by setting this to true. This defaults to false.","You could use more complex logic to determine if a flag has an enforced state, such as by using functions like wp_get_environment_type(), but bare in mind these functions may not be ready until later in the loading sequence and as such you may want to hook your registration to a hook such as muplugins_loaded."]},{"l":"Using Flags"},{"l":"PHP","p":["Ideally reading a flags status shouldn't be used before the init hook, and registration should happen before that point. This is to ensure that all flags have been registered and that the current user is logged in so we can determine if a user does have access.","The simplest check would be to use the is_enabled() method, which takes into consideration if a flag has a forced state or enabled on a per-user basis to give a valid answer.","Alternatively, all the other flag properties can be checked independently if you want more fine-control of the state of your flag."]},{"l":"Load Order","p":["If you access flags before the init hook you will be able to read the state but this will very much depend on the load-order. In theory you can read a flag status as soon as you have registered the flag, since the underlying code only requires access to get_option() and get_usermeta(). However, to get the user-based value for flags requires a user-id and get_current_user_id() is not available until after init, so results will vary depending on if a user-ID is required.","As you can see, in most instances you may want to wait for the init hook before checking a flag's status since any users who are opted in to the flag will not be enabled. This may also cause complexities if you're using the flag check in multiple points in the firing sequence in a WP application and the published state might change depending on your load state."]},{"l":"Javascript","p":["Flags are all registered and managed in the PHP application, but you may need to read the status of a flag in JavaScript. This package exports a number of functions to help. Install the @boxuk/wp-feature-flags package in your project and import the dependancies you'd like to use.","The following functions are available:","Function","Description","useFlags() or getFlags()","Returns an array of Flag objects, which you can iterate over for whatever reason.","useFlag(key) or getFlag(key)","Returns a specific Flag object for the given key, or undefined if not found.","useFlagEnabled(key) or getFlagEnabled(key)","Returns a boolean value of a flag, considering if the flag is forcibly enabled or disabled, and the current user's state.","registerStore()","Registers the store if not already. This store is not registered on the frontend of the site by default, so you'll need to call this at least once in your code. This is only required for the use* functions.","Retrieving flags is asynchronous, so the get* functions are all async. If you're using React you can use the use* hooks to have your components re-render automatically based on the async value resolving.","The definition of a Flag object is the same as the PHP declaration above, with the exception that there is an array of users on the flag, which consists of a numeric- string value of user IDs. ie. [ '1', '2', '3' ].","Example Code:"]},{"l":"Contributing"},{"i":"please-do-not-submit-any-pull-requests-here-they-will-be-closed","l":"Please do not submit any Pull Requests here. They will be closed.","p":["Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}],[{"i":"wp-query-include--exclude","l":"WP Query Include & Exclude","p":["This package allows the editor to specify posts to include or exclude in a Query Loop block when used in the Block Editor.","The core block supports the include and exclude attributes, since the query loop uses WP_Query when rendering. Any attribute that can be passed to WP_Query can be included, so we use this package to provide an interface to allow an editor to specify which posts should appear in a query loop."]},{"i":"please-do-not-submit-any-pull-requests-here-they-will-be-closed","l":"Please do not submit any Pull Requests here. They will be closed.","p":["Please submit your PR here instead: https://github.com/boxuk/wp-packages","This repository is what we call a \"subtree split\": a read-only subset of that main repository. We're looking forward to your PR there!"]}]]